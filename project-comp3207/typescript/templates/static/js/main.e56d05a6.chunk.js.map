{"version":3,"sources":["actions/index.js","components/Login/Login.jsx","components/SignUp/SignUp.jsx","components/ResetPassword/ResetPassword.jsx","components/UserInfo/UserInfo.jsx","components/Game/Game.jsx","App.js","serviceWorker.js","reducers/viewController.js","reducers/avatar.js","reducers/loginStatus.js","reducers/user.js","reducers/index.js","index.js"],"names":["changeView","page","type","payload","loadUser","user","Login","dispatch","useDispatch","useState","pass","setPass","setUser","loading","setLoading","className","size","speed","color","onChange","e","target","value","placeholder","onClick","setTimeout","localStorage","setItem","SignUp","confirmPass","setConfirmPass","alert","ResetPassword","oldPass","setOldPass","userPass","useSelector","state","newPass","setNewPass","isInputValid","UserInfo","username","password","date","progress","avatar","profile","useEffect","axios","post","then","res","catch","src","align","Game","code","setCode","mode","theme","name","fontSize","height","width","newValue","$blockScrolling","App","loginStatus","getItem","viewController","Boolean","window","location","hostname","match","viewControllerReducer","action","avatarReducer","loginStatusReducer","userReducer","allReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e56d05a6.chunk.js","sourcesContent":["export const login = () => {\n  return {\n    type: \"LOG_IN\"\n  };\n};\n\nexport const changeAvatar = avatar => {\n  return {\n    type: \"CHANGE_AVATAR\",\n    payload: avatar\n  };\n};\n\nexport const changeView = page => {\n  return {\n    type: \"CHANGE_VIEW\",\n    payload: page\n  };\n};\n\nexport const loadProfile = profile => {\n  return {\n    type: \"LOAD_PROFILE\",\n    payload: profile\n  };\n};\n\nexport const loadLoginStatus = status => {\n  return {\n    type: \"LOAD_STATUS\",\n    payload: status\n  };\n};\n\nexport const loadUser = user => {\n  return {\n    type: \"LOAD_USER\",\n    payload: user\n  };\n};\n","import React, { useState } from \"react\";\nimport \"./Login.css\";\nimport { useDispatch } from \"react-redux\";\nimport { changeView, login } from \"../../actions\";\nimport axios from \"axios\";\nimport { SemipolarLoading } from \"react-loadingg\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n  const [pass, setPass] = useState(\"\");\n  const [user, setUser] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  /**\n   * TODO: Add actual URL for login\n   */\n  const loginRequest = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      dispatch(changeView(\"GAME_PAGE\"));\n      // alert(\"Your name is \" + user + \", Your password is \" + pass + \".\");\n\n      localStorage.setItem(\"loginStatus\", \"ON\");\n      localStorage.setItem(\"user\", \"xhao98\");\n    }, 5000);\n\n    // axios\n    //   .get(\"OUR_SEVER\")\n    //   .then(res => {\n    //     alert(res);\n    //   })\n    //   .catch(\"\");\n  };\n  return (\n    <div className=\"loginpage\">\n      {loading === true && (\n        <SemipolarLoading size=\"large\" speed={3} color=\"#FFFFFF\" />\n      )}\n      {loading === false && (\n        <div className=\"innerlogin\">\n          <h1>CODE & PLAY</h1>\n          <input\n            onChange={e => {\n              setUser(e.target.value);\n            }}\n            value={user}\n            type=\"text\"\n            className=\"logininput\"\n            placeholder=\"Username\"\n          ></input>\n          <input\n            onChange={e => {\n              setPass(e.target.value);\n            }}\n            value={pass}\n            type=\"password\"\n            className=\"logininput\"\n            placeholder=\"Password\"\n          ></input>\n\n          <div className=\"loginbuttons\">\n            <button\n              onClick={() => {\n                loginRequest();\n              }}\n              type=\"button\"\n              className=\"loginbutton\"\n            >\n              Log In\n            </button>\n            <button\n              className=\"signup\"\n              onClick={() => {\n                dispatch(changeView(\"SIGNUP_PAGE\"));\n              }}\n            >\n              Sign up?\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Login;\n","import React, { useState } from \"react\";\nimport \"../Login/Login.css\";\nimport { useDispatch } from \"react-redux\";\nimport { changeView } from \"../../actions/\";\n\nfunction SignUp() {\n  const dispatch = useDispatch();\n  const [user, setUser] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [confirmPass, setConfirmPass] = useState(\"\");\n\n  const signupRequest = () => {\n    alert(\"Your name is \" + user + \", Your password is \" + pass + \".\");\n\n    // axios\n    //   .get(\"OUR_SEVER\")\n    //   .then(res => {\n    //     alert(res);\n    //   })\n    //   .catch(\"\");\n  };\n\n  return (\n    <div className=\"loginpage\">\n      <div className=\"innerlogin\">\n        <h1>CODE & PLAY</h1>\n        <input\n          onChange={e => {\n            setUser(e.target.value);\n          }}\n          value={user}\n          type=\"text\"\n          className=\"logininput\"\n          placeholder=\"Username\"\n        ></input>\n        <input\n          onChange={e => {\n            setPass(e.target.value);\n          }}\n          value={pass}\n          type=\"password\"\n          className=\"logininput\"\n          placeholder=\"Password\"\n        ></input>\n        <input\n          type=\"password\"\n          onChange={e => {\n            setConfirmPass(e.target.value);\n          }}\n          value={confirmPass}\n          className=\"logininput\"\n          placeholder=\"Retype password\"\n        ></input>\n        <div className=\"loginbuttons\">\n          <button\n            onClick={() => {\n              signupRequest();\n            }}\n            type=\"button\"\n            className=\"loginbutton\"\n          >\n            Sign Up\n          </button>\n          <button\n            onClick={() => {\n              dispatch(changeView(\"LOGIN_PAGE\"));\n            }}\n            className=\"signup back\"\n          >\n            Back\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SignUp;\n","import React, { useState } from \"react\";\nimport \"./ResetPassword.css\";\nimport { changeView } from \"../../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nfunction ResetPassword() {\n  const [oldPass, setOldPass] = useState(\"\");\n  const userPass = useSelector(state => state.userPass);\n  const [newPass, setNewPass] = useState(\"\");\n  const [confirmPass, setConfirmPass] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const resetRequest = () => {\n    alert(\"Your name is \" + newPass + \", Your password is \" + oldPass + \".\");\n    if (isInputValid() === true) {\n      // axios\n      //   .get(\"OUR_SEVER\")\n      //   .then(res => {\n      //     alert(res);\n      //   })\n      //   .catch(\"\");\n    }\n  };\n\n  /**\n   * Validation on the new password\n   */\n  const isInputValid = () => {\n    if (oldPass !== userPass) {\n      alert(\"Your Old Password is Incorrect\");\n      return false;\n    } else if (newPass === oldPass) {\n      alert(\"Your new password is same as your old password!\");\n      return false;\n    } else if (newPass !== confirmPass) {\n      alert(\"New Passwords do not match.\");\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <div className=\"resetpassword\">\n      <div className=\"innerreset\">\n        <h5>Reset password</h5>\n        <input\n          onChange={e => {\n            setOldPass(e.target.value);\n          }}\n          value={oldPass}\n          className=\"passwordinput\"\n          type=\"password\"\n          placeholder=\"Enter original password\"\n        ></input>\n        <input\n          onChange={e => {\n            setNewPass(e.target.value);\n          }}\n          value={newPass}\n          className=\"passwordinput\"\n          type=\"password\"\n          placeholder=\"Enter new password\"\n        ></input>\n        <input\n          onChange={e => {\n            setConfirmPass(e.target.value);\n          }}\n          value={confirmPass}\n          className=\"passwordinput\"\n          type=\"password\"\n          placeholder=\"Confirm new password\"\n        ></input>\n        <div>\n          <button\n            onClick={() => {\n              resetRequest();\n            }}\n            type=\"button\"\n            className=\"savepassword\"\n          >\n            Save new password\n          </button>\n          <button\n            className=\"savepassword\"\n            onClick={() => {\n              dispatch(changeView(\"USER_INFO_PAGE\"));\n            }}\n          >\n            BACK\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n","import React, { useState, useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeView, changeAvatar } from \"../../actions/index\";\nimport \"./UserInfo.css\";\nimport axios from \"axios\";\n\nfunction UserInfo() {\n  const dispatch = useDispatch();\n  const [profile, setProfile] = useState({\n    username: \"Zehao\",\n    password: \"123123\",\n    date: \"23/09/2019\",\n    progress: \"20\",\n    avatar: \"goblin.png\"\n  });\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    axios\n      .post(\"/user\", {username: \"user0\"})\n      .then(res => {\n        alert(res);\n      })\n      .catch(res => {\n        alert(\"Not Working\");\n      });\n  });\n\n  /**\n   *  Simple HTML structures  - Apply CSS after.\n   */\n\n  //TODO: ADD URL AND ACTION TO RESPOSNE\n  const saveRequest = () => {\n    // axios\n    //   .get()\n    //   .then()\n    //   .catch();\n\n    dispatch(changeAvatar(\"GOBLIN\"));\n  };\n\n  return (\n    <div className=\"userinfopage\">\n      <div className=\"avatarholder\">\n        <img src={profile.avatar} className=\"avatarimage\"></img>\n        <button className=\"changeavatar\">Change Avatar</button>\n      </div>\n      <div className=\"userinfoholder\">\n        <div className=\"usernameinfoholder\">\n          <h2 className=\"label\">Username</h2>\n          <h2 className=\"info\" align=\"left\">\n            {profile.username}\n          </h2>\n        </div>\n        <div className=\"passwordinfoholder\">\n          <h2 className=\"label passwordlabel\">Password</h2>\n          <h2 type=\"password\" className=\"info\" align=\"left\">\n            ********\n          </h2>\n          <button\n            onClick={() => {\n              dispatch(changeView(\"RESET_PAGE\"));\n            }}\n            className=\"changepassword\"\n          >\n            Change Password\n          </button>\n        </div>\n        <div className=\"usernameinfoholder\">\n          <h2 className=\"label\">Joined</h2>\n          <h2 className=\"info\" align=\"left\">\n            {profile.date}\n          </h2>\n        </div>\n        <div className=\"usernameinfoholder\">\n          <h2 className=\"label\">Progress</h2>\n          <h2 className=\"info\" align=\"left\">\n            {profile.progress + \"%\"}\n          </h2>\n        </div>\n        <div className=\"infobuttons\">\n          <button\n            onClick={() => {\n              dispatch(changeView(\"GAME_PAGE\"));\n            }}\n            className=\"infobutton\"\n          >\n            Back\n          </button>\n          <button className=\"infobutton\">Save</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserInfo;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeView } from \"../../actions\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-typescript\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"./Game.css\";\n\nfunction Game() {\n  const dispatch = useDispatch();\n\n  const [code, setCode] = useState(\"\");\n\n  function onChange(newValue) {\n    setCode(newValue);\n  }\n\n  const logoff = () => {\n    localStorage.setItem(\"user\", \"\");\n    localStorage.setItem(\"loginStatus\", \"OFF\");\n    dispatch(changeView(\"LOGIN_PAGE\"));\n  };\n\n  return (\n    <div className=\"gamepage\">\n      <div className=\"chapters\">\n        <div className=\"chapterholder\">\n          <p>First program</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Type annotation</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Variables</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Numbers</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Strings</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Boolean</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Array</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Tuple</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Enum</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Union</p>\n        </div>\n        <div className=\"chapterholder current\">\n          <p>Any</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Void</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Never</p>\n        </div>\n        <div className=\"chapterholder\">\n          <p>Type inference</p>\n        </div>\n      </div>\n      <div className=\"logo\">\n        <h3>Code & Play</h3>\n      </div>\n      <div className=\"userinfotag\">\n        <button\n          onClick={() => {\n            dispatch(changeView(\"USER_INFO_PAGE\"));\n          }}\n          className=\"userinfo\"\n        >\n          User info\n        </button>\n        <button\n          onClick={() => {\n            logoff();\n          }}\n          className=\"btn-log-off\"\n        >\n          LOG OFF\n        </button>\n      </div>\n      <div className=\"story\">\n        <p className=\"storytext\" align=\"justify\">\n          One day, the evil Mephisto burned down all of the villages. Everyone\n          died a fiery death but one. The name was Ze. The legend begins...\n          <br></br>\n          <br></br>\n          24 years later, Prognosis is still under the wicked rule of Mephisto,\n          or as his friends call him, the Mephman, Phisty Boi or simply, the Big\n          M. Not that he had any friends, no. His friends had died in a freak\n          sleepover accident. Mephisto was the only survivor, and he vowed never\n          to have friends again. He's actually a really misunderstood character.\n          But he did not handle this tragic loss well as he made it his life\n          goal to rule Prognosis, for eternity.\n          <br></br>\n          <br></br>\n          Crimbi, the local fool of the village of Gadad, was up to his usual\n          tomfoolery. Being the only fool in the village, he was given special\n          permission to smile and laugh, which was strictly banned for everyone\n          else in Prognosis. Today, Crimbi decided to swim across the river\n          Manto, despite its strong currents and history of drowning swimmers.\n          Yes, Crimbi was a fool alright.\n        </p>\n      </div>\n      <div className=\"instructionssolution\">\n        <p className=\"instructions\" align=\"left\">\n          <ol>\n            <li>Help swim</li>\n            <li>Don't die</li>\n            <li>Don't die</li>\n            <li>Don't die</li>\n            <li>Don't die</li>\n            <li>Don't die</li>\n          </ol>\n        </p>\n        <button className=\"solutiontag\">Solution</button>\n      </div>\n      <div className=\"code\">\n        <AceEditor\n          mode=\"typescript\"\n          theme=\"monokai\"\n          name=\"code\"\n          fontSize={15}\n          height=\"280px\"\n          width=\"560px\"\n          onChange={onChange}\n          value={code}\n          name=\"UNIQUE_ID_OF_DIV\"\n          editorProps={{ $blockScrolling: true }}\n        />\n        <div className=\"codebuttons\">\n          <button className=\"codebutton\">Run</button>\n          <button\n            onClick={() => {\n              setCode(\"\");\n            }}\n            className=\"codebutton\"\n          >\n            Restart\n          </button>\n        </div>\n      </div>\n      <div className=\"output\">\n        <p>Hello world</p>\n      </div>\n    </div>\n  );\n}\nexport default Game;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Login from \"./components/Login/Login\";\nimport SignUp from \"./components/SignUp/SignUp\";\nimport ResetPassword from \"./components/ResetPassword/ResetPassword\";\nimport UserInfo from \"./components/UserInfo/UserInfo\";\nimport Game from \"./components/Game/Game\";\nimport { loadLoginStatus, loadUser, changeView } from \"./actions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const loginStatus = localStorage.getItem(\"loginStatus\");\n    const user = loginStatus ? localStorage.getItem(\"user\") : \"\";\n\n    dispatch(loadUser(user));\n    if (loginStatus === \"ON\") {\n      dispatch(changeView(\"GAME_PAGE\"));\n    }\n  }, []);\n\n  const viewController = useSelector(state => state.viewController);\n\n  return (\n    <div className=\"App\">\n      {viewController === \"LOGIN_PAGE\" && <Login />}\n      {viewController === \"SIGNUP_PAGE\" && <SignUp />}\n      {viewController === \"RESET_PAGE\" && <ResetPassword />}\n      {viewController === \"USER_INFO_PAGE\" && <UserInfo />}\n      {viewController === \"GAME_PAGE\" && <Game />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const viewControllerReducer = (state = \"LOGIN_PAGE\", action) => {\n  switch (action.type) {\n    case \"CHANGE_VIEW\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default viewControllerReducer;\n","const avatarReducer = (state = \"GOBLIN\", action) => {\n  switch (action.type) {\n    case \"GOBLIN\":\n      return \"GOBLIN\";\n    case \"WARRIOR\":\n      return \"WARRIOR\";\n    case \"KNIGHT\":\n      return \"KNIGHT\";\n    case \"DRAGON\":\n      return \"DRAGON\";\n\n    default:\n      return state;\n  }\n};\nexport default avatarReducer;\n","const loginStatusReducer = (state = \"LOG_OFF\", action) => {\n  switch (action.type) {\n    case \"LOAD_STATUS\":\n      return action.type;\n    default:\n      return state;\n  }\n};\nexport default loginStatusReducer;\n","const userReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case \"LOAD_USER\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\nexport default userReducer;\n","import viewControllerReducer from \"./viewController\";\nimport avatarReducer from \"./avatar\";\nimport loginStatusReducer from \"./loginStatus\";\nimport userReducer from \"./user\";\n\nimport { combineReducers } from \"redux\";\nimport { login } from \"../actions\";\n\nconst allReducers = combineReducers({\n  viewController: viewControllerReducer,\n  avatar: avatarReducer,\n  loginStatus: loginStatusReducer,\n  user: userReducer\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport allReducers from \"./reducers/\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n//STORE - Placeholder of global STATES\nlet store = createStore(\n  allReducers,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\n// ACTION\n\n// REDUCER\n\n//DISPATCH\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}